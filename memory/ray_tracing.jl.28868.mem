        - include("scene.jl")
        - 
        - using Base.Threads
        - 
        - # returns an image
        - function ray_trace(s::Scene)
        -     #result = MArray{Tuple{s.width, s.height, 3}, Float64}(undef)
 12583008     result = Matrix{RGB{Float64}}(undef, s.height, s.width)
        - 
        0     if is_empty(s.primitives)
        0         return result
        -     end
        - 
        0     camera_origin = SVector{3, Float64}(s.camera_to_world[1:3, 4])
        - 
        0     Threads.@threads for i in 1:1:s.width
        -         for j in 1:1:s.height
        -             # calculate ray
        -             pixel_camera = SVector{4, Float64}((2.0 * (i - 0.5) - s.width) * s.camera_fov_tan / s.height, 
        -             (1.0 - 2.0 * (j - 0.5) / s.height) * s.camera_fov_tan, 
        -             -1.0, 
        -             1.0)
        -             ray_direction = SVector{3, Float64}(normalize((s.camera_to_world * pixel_camera)[1:3] - camera_origin))
        -             ray = Ray(camera_origin, ray_direction)
        - 
        -             result[j, s.width - i + 1] = get_ray_color(s, ray, s.recursion_depth)
        -         end
        -     end
        - 
        -     # post processing
        0     if s.antialiasing
        0         return run_antialiasing(s, result)
        -     end
        -     result
        - end
        - 
        - function get_ray_color(s::Scene, ray::Ray{T}, recur::Int) where T <: AbstractFloat
960738400     best_t, best_prim = get_closest_intersection(s.primitives, ray)
        - 
        -     # calculate color
        0     if best_t < Inf64
        -         # return best_prim.mat.rgb
269598976         return calculate_color_phong(s, best_prim, ray, best_t, recur)
        -     else
  1804032         return s.background_color
        -     end
        - end
        - 
        - function calculate_color_phong(s::Scene, prim::Primitive, ray::Ray{T}, t::T, recur::Int) where T <: AbstractFloat
        -     rgb = SVector{3, T}(0.0, 0.0, 0.0)
        0     intersection_position = ray.direction * t + ray.origin
        0     prim_mat = get_material(prim)
        0     prim_col = SVector{3, T}(prim_mat.rgb.r, prim_mat.rgb.g, prim_mat.rgb.b)
        0     prim_normal = get_normal(prim, intersection_position)
        0     for light in s.lights        
539197984         light_dir = normalize(light.position - intersection_position)
471798240         if is_obscured(s, Ray(intersection_position, light_dir), norm(light.position - intersection_position))
        -             continue
        -         end
710514464         light_col = SVector{3, T}(light.rgb.r, light.rgb.g, light.rgb.b)
516737472         diffuse = prim_mat.kd * light_col .* prim_col * max(dot(prim_normal, light_dir), 0.0)
        - 
1227252032         reflect_dir = normalize(-light_dir - 2.0 * dot(-light_dir, prim_normal) .* prim_normal)
581329728         specular = prim_mat.ks * light_col * (max(dot(-ray.direction, reflect_dir), 0.0) ^ prim_mat.shine)
        - 
258368896         rgb += diffuse + specular
        0     end
        - 
        0     if recur > 0
        -         # reflection
        0         if prim_mat.T != 1.0 && prim_mat.ks != 0.0
        0             reflect_dir = normalize(ray.direction - 2.0 * dot(ray.direction, prim_normal) * prim_normal)
        0             reflect_col = get_ray_color(s, Ray(intersection_position + 0.01 * (-ray.direction), reflect_dir), recur - 1)
505719872             rgb += (1.0 - prim_mat.T) * prim_mat.ks * SVector{3, T}(reflect_col.r, reflect_col.g, reflect_col.b)
        -         end
        - 
        -         # refraction
        0         if prim_mat.T != 0.0
        0             VdotN = dot(ray.direction, prim_normal)
        0             gamma = prim_mat.ior
        0             neg_normal = -prim_normal
        - 
        0             if VdotN < 0.0
        0                 gamma = 1 / gamma
        0                 VdotN = -VdotN
        -                 neg_normal = prim_normal
        -             end
        - 
        0             sqterm = 1.0 - gamma * gamma * (1.0 - VdotN * VdotN)
        - 
        0             if sqterm > 0.0
        0                 sqterm = sqrt(sqterm)
        - 
        0                 refract_dir = normalize((sqterm * (-neg_normal)) - gamma * ((VdotN * (-neg_normal)) - ray.direction))
        0                 refract_col = get_ray_color(s, Ray(intersection_position - 0.01 * neg_normal, refract_dir), recur - 1)
 33498656                 rgb += prim_mat.T * SVector{3, T}(refract_col.r, refract_col.g, refract_col.b)
        -             end
        -         end
        -     end
        - 
1010996640     return RGB(min(rgb[1], 1.0), min(rgb[2], 1.0), min(rgb[3], 1.0))
        - end
        - 
        - function is_obscured(s::Scene, ray::Ray{T}, dist::T) where T <: AbstractFloat
        0     is_obscured(s.primitives, ray, dist, s.shadow_epsilon)
        - end
        - 
        - function run_antialiasing(s::Scene, original::Matrix{RGB{Float64}})
        0     result = Matrix{RGB{Float64}}(undef, s.height, s.width)
        0     num_rays = 1.0 / (s.aa_sqrt_rays * s.aa_sqrt_rays)
        0     fraction = 1.0 / s.aa_sqrt_rays
        0     fraction2 = 1.0 / (2.0 * s.aa_sqrt_rays)
        -     inv_width = 1.0 / s.width
        0     inv_height = 1.0 / s.height
        - 
        0     for i in 1:1:s.height
        0         for j in 1:1:s.width
        0             if (j > 1 && compare_color(original[i, j], original[i, j - 1], s.aa_max_color_diff)) ||
        -                 (j < s.width && compare_color(original[i, j], original[i, j + 1], s.aa_max_color_diff)) ||
        -                 (i > 1 && compare_color(original[i, j], original[i - 1, j], s.aa_max_color_diff)) ||
        -                 (i < s.height && compare_color(original[i, j], original[i + 1, j], s.aa_max_color_diff))
        - 
        -                 r = 0.0
        -                 g = 0.0
        -                 b = 0.0
        0                 for u in 1:1:s.aa_sqrt_rays
        0                     for v in 1:1:s.aa_sqrt_rays
        0                         pixel_camera = SVector{4, Float64}((2.0 * (s.width - j + 1 - fraction2 - (u - 1) * fraction) - s.width) * s.camera_fov_tan * inv_height,
        -                         (1.0 - 2.0 * (i - fraction2 - (v - 1) * fraction) * inv_height) * s.camera_fov_tan,
        -                         -1.0, 1.0)
        0                         ray_direction = SVector{3, Float64}(normalize((s.camera_to_world * pixel_camera)[1:3] - s.camera_to_world[1:3, 4]))
        0                         ray = Ray(SVector{3, Float64}(s.camera_to_world[1:3, 4]), ray_direction)
        - 
        0                         color = get_ray_color(s, ray, s.recursion_depth)
        0                         r += color.r
        0                         g += color.g
        0                         b += color.b
        0                     end
        0                 end
        -                 
        0                 result[i, j] = RGB{Float64}(r * num_rays, g * num_rays, b * num_rays)
        -             else
        0                 result[i, j] = original[i, j]
        -             end
        0         end
        0     end
        - 
        0     return result
        - end
        - 
        - function compare_color(c1::RGB{Float64}, c2::RGB{Float64}, diff::T) where T <: AbstractFloat
        -     return abs(c1.r - c2.r) + abs(c1.g - c2.g) + abs(c1.b - c2.b) > diff
        - end
